<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <context:component-scan base-package="org.juqkai">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--告诉spring去哪里获取占位符的配置文件  -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>


    <!--配置数据源  -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass"><value>${db.driver}</value></property>
        <property name="jdbcUrl"><value>${db.url}</value></property>
        <property name="user"><value>${db.user}</value></property>
        <property name="password"><value>${db.password}</value></property>
    </bean>

    <!--数据源提供给spring的sessionFactory，这里我们要求是使用注解方式，
    所以spring要选择AnnotationSessionFactoryBean来获取sessionFactory
    当然你如果要用xml的，使用LoaclSessionFactoryBean来配置，
    当然这里的AnnotationSessionFactoryBean是继承LoaclSessionFactoryBean
    但是发现，hibernate4版本更改了，会报错误“java.lang.NoClassDefFoundError: Lorg/hibernate/cache/CacheProvider;”  -->
    <!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        让spring帮你扫描这个包底下的所有类，主要作用扫描跟数据库对应的实体类
        <property name="packagesToScan" value="spring.model"/>
        设置hibernate的属性
        <property name="hibernateProperties">
          <value>
            hibernate.dialect=org.hibernate.dialect.MySQLDialect
            hibernate.show_sql=true
          </value>
        </property>
    </bean> -->

    <!--看看源码中的这段话，其实它更接近于annotation，你跟进代码，发现他是支持注解的
    <p><b>NOTE:</b> This variant of LocalSessionFactoryBean requires Hibernate 4.0
     * or higher. It is similar in role to the same-named class in the <code>orm.hibernate3</code>
     * package. However, in practice, it is closer to <code>AnnotationSessionFactoryBean</code>
     * since its core purpose is to bootstrap a <code>SessionFactory</code> from annotation scanning.  -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 让spring帮你扫描这个包底下的所有类，主要作用扫描跟数据库对应的实体类  -->
        <property name="packagesToScan" value="org.juqkai.demo.model"/>
        <!-- 设置hibernate的属性  -->
        <property name="hibernateProperties">
            <props>
                <!-- 指定Hibernate的连接方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- 配置启动应用时，是否根据Hibernate映射自动创建数据表 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>

    </bean>

    <!--事务配置  -->
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <aop:config>
        <aop:advisor pointcut="execution(* spring.service.*Service.*(..))" advice-ref="txAdvice"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="fetch*" read-only="true"/>
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>


    <import resource="classpath:cxf-servlet.xml" ></import>

</beans>
